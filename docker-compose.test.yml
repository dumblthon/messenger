# docker-compose -f docker-compose.test.yml --env-file docker-test.env up / down

version: '3.8'
networks:
  messenger-net:
    name: messenger-net
    driver: bridge
volumes:
  mongo-data:
  mongo-config:
  mongo-log:
  postgres-data:
  postgres-log:
  pgadmin-data:
  pgadmin-servers:
services:
  mongo:
    image: mongo:${MONGO_VERSION}
    container_name: mongo
    networks:
      - messenger-net
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - mongo-log:/var/log/mongodb
    env_file:
      - mongodb/mongo-${PROFILE}.env
  mongo_express:
    image: mongo-express:${MONGO_EXPRESS_VERSION}
    container_name: mongo_express
    restart: always
    networks:
      - messenger-net
    ports:
      - "${MONGO_EXPRESS_HOST_PORT}:8081"
    env_file:
      - mongodb/mongo_express-${PROFILE}.env
    depends_on:
      - "mongo"
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    networks:
      - messenger-net
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - postgres-log:/var/log/postgresql
      - ./postgresql/init:/docker-entrypoint-initdb.d
    env_file:
      - postgresql/postgres-${PROFILE}.env
  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    container_name: pgadmin4
    restart: always
    networks:
      - messenger-net
    ports:
      - "${PGADMIN_HOST_PORT}:80"
    volumes:
    - pgadmin-data:/var/lib/pgadmin
    - pgadmin-servers:/pgadmin4/servers.json
    env_file:
      - postgresql/pgadmin-${PROFILE}.env
  user_service:
    container_name: user_service
    build:
      context: ./user_service
    environment:
      PROFILE: ${PROFILE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/user_service
      SPRING_DATASOURCE_USERNAME: user_service
      SPRING_DATASOURCE_PASSWORD: user_service
      SPRING_SHOW_SQL: 'true'

      SPRING_JPA_GENERATE_DLL: 'true'
      # SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEME: user_service
      SPRING_JPA_HIBERNATE_DLL_AUTO: update
    networks:
      - messenger-net
    ports:
      - target: 8080
        published: 80
        protocol: tcp
        mode: host
    volumes:
      - ~/user_service/logs:/log
      - ~/user_service/config:/config
    depends_on:
      - 'postgres'
